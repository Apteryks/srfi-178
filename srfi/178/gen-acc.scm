(define (make-bitvector-generator/int bvec)
  (lambda ()
    (let ((len (bitvector-length bvec))
          (i 0))
      (if (= i len)
        (eof-object)
        (let ((r (bitvector-ref/int i)))
          (set! i (+ i 1))
          r)))))

(define (make-bitvector-generator/bool bvec)
  (lambda ()
    (let ((len (bitvector-length bvec))
          (i 0))
      (if (= i len)
        (eof-object)
        (let ((r (bitvector-ref/bool i)))
          (set! i (+ i 1))
          r)))))

(define (make-bitvector-accumulator)
  (lambda (x)
    (let ((r '()))
      (if (eof-object? x)
        (reverse-list->bitvector r)
        (set! r (cons x r))))))
