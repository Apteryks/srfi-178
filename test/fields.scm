(define (check-bit-field-operations)
  (print-header "Checking bit field operations...")

  (check (bitvector-field-any? (bitvector 0 1 0 0) 0 4) => #t)
  (check (bitvector-field-any? (bitvector 0 0 0 0) 0 4) => #f)
  (check (bitvector-field-any? (bitvector 0 1 0 0) 1 3) => #t)
  (check (bitvector-field-any? (bitvector 0 1 0 0) 2 4) => #f)

  (check (bitvector-field-every? (make-bitvector 4 1) 0 4) => #t)
  (check (bitvector-field-every? (bitvector 1 1 1 0) 0 4) => #f)
  (check (bitvector-field-every? (bitvector 1 1 0 0) 0 2) => #t)
  (check (bitvector-field-every? (bitvector 1 1 0 0) 2 4) => #f)

  (check (bitvector= (bitvector-field-clear (make-bitvector 4 1) 0 2)
                     (bitvector 0 0 1 1))
   => #t)
  (let ((bvec (make-bitvector 4 1)))
    (check (bitvector= (begin (bitvector-field-clear! bvec 0 2) bvec)
                       (bitvector 0 0 1 1))
     => #t))
  (check (bitvector= (bitvector-field-set (make-bitvector 4 0) 0 2)
                     (bitvector 1 1 0 0))
   => #t)
  (let ((bvec (make-bitvector 4 0)))
    (check (bitvector= (begin (bitvector-field-set! bvec 0 2) bvec)
                       (bitvector 1 1 0 0))
     => #t))
)
